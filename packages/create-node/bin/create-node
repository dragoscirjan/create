#!/usr/bin/env node

import { program } from "commander";
import { resolve } from "path";

import logger from "../src/util/logger.js";
import readFile from "../src/util/read-file.js";
import defaultAction, {
  allBuildTools,
  allLanguages,
  allPackageManagers,
  allTestFrameworks,
  allQualityTools,
  allTargets,
} from "../src/commands/default.js";
import buildAction from "../src/commands/build.js";

program
  .argument("<projectPath>", "Project Path")
  .option("-l, --language <language>", `Programming Language to use: ${allLanguages.join(", ")}`, "ts")
  .option("-t, --targets <targets...>", `Module's target: ${allTargets.join(", ")} or all`, "all")
  .option("--package-manager <packageManger>", `Package Manager to use: ${allPackageManagers.join(", ")}`, "npm")
  .option("--test-framework <testFramework>", `Testing Framework to use: ${allTestFrameworks.join(", ")}`, "jest")
  .option("--quality-tools <qualityTools...>", `Quality Tools to use: ${allQualityTools.join(", ")} or all`, "all")
  .option("--build-tool <buildTool>", `Build Tool to use: ${allBuildTools.join(", ")}`)
  .action(async (projectPath, options) => {
    options = {
      ...options,
      projectPath: resolve(projectPath),
      qualityTools: options.qualityTools === "all" ? allQualityTools : options.qualityTools,
      targets: options.targets === "all" || options.targets?.includes("all") ? allTargets : options.targets,
      logger,
    };
    // console.log(options);
    // process.exit(0);

    const { language, qualityTools, buildTool, packageManager, testFramework, targets } = options;

    const testsAndMessages = [
      [!allLanguages.includes(language), `Invalid language '${language}'. Accepted: ${allLanguages.join(", ")}`],
      [
        !targets.map((t) => allTargets.includes(t)).reduce((a, c) => a && c, true),
        `Invalid targets '${targets.join(", ")}'. Accepted: ${allTargets.join(", ")}`,
      ],
      [
        !allPackageManagers.includes(packageManager),
        `Invalid language '${packageManager}'. Accepted: ${allPackageManagers.join(", ")}`,
      ],
      [
        !allTestFrameworks.includes(testFramework),
        `Invalid test frame '${testFramework}'. Accepted: ${allTestFrameworks.join(", ")}`,
      ],
      [
        !qualityTools.map((qt) => allQualityTools.includes(qt)).reduce((a, c) => a && c, true),
        `Invalid targets '${qualityTools.join(", ")}'. Accepted: ${allQualityTools.join(", ")}`,
      ],
      [
        ![undefined, ...allBuildTools].includes(buildTool),
        `Invalid build tool '${buildTool}'. Accepted: ${allBuildTools.join(", ")}`,
      ],
    ];

    for (const [test, message] of testsAndMessages) {
      if (test) {
        logger.warn(message);
        process.exit(1);
      }
    }

    return defaultAction(projectPath, options);
  });

program
  .command("build")
  .description("Build the project")
  .option("--build-tool <buildTool>", `Build Tool to use: ${allBuildTools.join(", ")}`)
  .action(async (options) => {
    const projectPath = process.cwd();

    options = {
      ...options,
      projectPath,
      logger,
    };

    await readFile(".createrc", options).then((data) => {
      const json = JSON.parse(data);
      options = {
        ...options,
        ...json,
        // TODO: coffee not supported yet
        buildTool: options.buildTool || json.language === "ts" ? "tsc" : "babel",
      };
    });

    // console.log(options);
    // process.exit(0);

    return buildAction(projectPath, options);
  });

program.parse();
